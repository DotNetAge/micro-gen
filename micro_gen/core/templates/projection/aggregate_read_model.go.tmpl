package projection

import (
	"time"
	"{{ project_name }}/internal/entity"
	"{{ project_name }}/internal/entity/projection"
)

// {{ read_model_name }} {{ aggregate_name }}聚合的读模型实体
type {{ read_model_name }} struct {
	*projection.ReadModel
	
	// 业务字段
{% for field in fields %}
	{{ field.name|capitalize }} {% if field.type in value_object_types %}entity.{{ field.type }}{% else %}{{ field.type }}{% endif %}{% if field.json %} `json:"{{ field.json }}"{% else %} `json:"{{ field.name }}"{% endif %}`
{% endfor %}
}

// New{{ read_model_name }} 创建{{ aggregate_name }}读模型
func New{{ read_model_name }}(id string) *{{ read_model_name }} {
	return &{{ read_model_name }}{
		ReadModel: projection.NewReadModel(id, "{{ aggregate_name|lower }}"),
	}
}

// ApplyEvent 应用领域事件到读模型
func (m *{{ read_model_name }}) ApplyEvent(event entity.DomainEvent) error {
	switch event.GetEventType() {
	case "{{ aggregate_name }}Created":
		return m.applyCreated(event)
	case "{{ aggregate_name }}Updated":
		return m.applyUpdated(event)
	case "{{ aggregate_name }}Deleted":
		return m.applyDeleted(event)
	default:
		return nil // 忽略不相关事件
	}
}

func (m *{{ read_model_name }}) applyCreated(event entity.DomainEvent) error {
	// 从事件数据填充业务字段
	data := event.GetData()
	
	// TODO: 根据实际事件结构填充字段
	// 示例：
	// if name, ok := data["name"]; ok {
	// 	m.Name = name.(string)
	// }
	
	return nil
}

func (m *{{ read_model_name }}) applyUpdated(event entity.DomainEvent) error {
	// 从事件数据更新业务字段
	data := event.GetData()
	
	// TODO: 根据实际事件结构更新字段
	_ = data
	
	return nil
}

func (m *{{ read_model_name }}) applyDeleted(event entity.DomainEvent) error {
	// 标记为已删除或清理数据
	// 可以设置删除标记或清空字段
	return nil
}