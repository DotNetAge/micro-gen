package projection

import (
	"context"

	"{{ project_name }}/internal/entity"
	"{{ project_name }}/internal/entity/projection"
)

// {{ aggregate_name }}Repository {{ aggregate_name }}读模型存储接口
type {{ aggregate_name }}Repository interface {
	Save(ctx context.Context, model *{{ read_model_name }}) error
	FindByID(ctx context.Context, id string) (*{{ read_model_name }}, error)
	FindAll(ctx context.Context) ([]*{{ read_model_name }}, error)
	Delete(ctx context.Context, id string) error
}

// {{ aggregate_name }}ProjectionService {{ aggregate_name }}投影用例服务
type {{ aggregate_name }}ProjectionService struct {
	repo {{ aggregate_name }}Repository
}

// New{{ aggregate_name }}ProjectionService 创建投影服务
func New{{ aggregate_name }}ProjectionService(repo {{ aggregate_name }}Repository) *{{ aggregate_name }}ProjectionService {
	return &{{ aggregate_name }}ProjectionService{
		repo: repo,
	}
}

// HandleEvent 处理领域事件并更新读模型
func (s *{{ aggregate_name }}ProjectionService) HandleEvent(ctx context.Context, event entity.DomainEvent) error {
	// 加载现有读模型
	existing, err := s.repo.FindByID(ctx, event.GetAggregateID())
	if err != nil && err != projection.ErrReadModelNotFound {
		return err
	}
	
	// 创建或获取读模型
	var model *{{ read_model_name }}
	if existing != nil {
		model = existing
	} else {
		model = New{{ read_model_name }}(event.GetAggregateID())
	}
	
	// 应用事件
	if err := model.ApplyEvent(event); err != nil {
		return err
	}
	
	// 保存更新
	return s.repo.Save(ctx, model)
}

// Get{{ aggregate_name }} 获取{{ aggregate_name }}读模型
func (s *{{ aggregate_name }}ProjectionService) Get{{ aggregate_name }}(ctx context.Context, id string) (*{{ read_model_name }}, error) {
	return s.repo.FindByID(ctx, id)
}

// GetAll{{ aggregate_name }}s 获取所有{{ aggregate_name }}读模型
func (s *{{ aggregate_name }}ProjectionService) GetAll{{ aggregate_name }}s(ctx context.Context) ([]*{{ read_model_name }}, error) {
	return s.repo.FindAll(ctx)
}