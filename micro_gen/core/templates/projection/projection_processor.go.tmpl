package projection

import (
	"context"

	"{{ project_name }}/internal/entity"
	"{{ project_name }}/internal/usecase/projection"
)

// {{ aggregate_name }}ProjectionProcessor {{ aggregate_name }}投影事件处理器
type {{ aggregate_name }}ProjectionProcessor struct {
	service *projection.{{ aggregate_name }}ProjectionService
}

// New{{ aggregate_name }}ProjectionProcessor 创建投影处理器
func New{{ aggregate_name }}ProjectionProcessor(service *projection.{{ aggregate_name }}ProjectionService) *{{ aggregate_name }}ProjectionProcessor {
	return &{{ aggregate_name }}ProjectionProcessor{
		service: service,
	}
}

// SupportedEventTypes 返回支持的事件类型
func (p *{{ aggregate_name }}ProjectionProcessor) SupportedEventTypes() []string {
	return []string{
		"{{ aggregate_name }}Created",
		"{{ aggregate_name }}Updated", 
		"{{ aggregate_name }}Deleted",
	}
}

// ProcessEvent 处理领域事件
func (p *{{ aggregate_name }}ProjectionProcessor) ProcessEvent(ctx context.Context, event entity.DomainEvent) error {
	return p.service.HandleEvent(ctx, event)
}