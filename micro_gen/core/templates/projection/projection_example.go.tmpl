package main

import (
	"context"
	"fmt"
	"log"

	"{{ project_name }}/adapter/persistence"
	"{{ project_name }}/internal/usecase/projection"
)

// {{ aggregate_name }}投影系统使用示例
func main() {
	// 1. 创建基础设施（适配器层）
	repo := persistence.NewMemory{{ aggregate_name }}Repository()
	
	// 2. 创建用例层服务
	service := projection.New{{ aggregate_name }}ProjectionService(repo)
	
	// 3. 创建事件处理器（适配器层）
	processor := projection.New{{ aggregate_name }}ProjectionProcessor(service)
	
	// 4. 注册到事件总线
	fmt.Println("{{ aggregate_name }}投影系统已初始化")
	fmt.Println("请将处理器注册到事件总线：")
	fmt.Printf("eventBus.Subscribe(%s)\n", processor)
	
	// 5. 使用示例
	ctx := context.Background()
	
	// 查询示例
	models, err := service.GetAll{{ aggregate_name }}s(ctx)
	if err != nil {
		log.Printf("查询失败: %v", err)
	} else {
		fmt.Printf("找到 %d 个{{ aggregate_name }}读模型\n", len(models))
	}
}